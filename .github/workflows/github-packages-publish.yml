name: GitHub Packages Publish
run-name: ${{ github.workflow }} for ${{ github.ref_name }} [${{ github.event_name }} ${{github.event.action}}] ${{ inputs.versionType }} ${{ inputs.publishTag }} [${{ github.sha }}]

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened, closed]
    branches:
      - main
    paths:
      - 'src/**'
      - 'nuxt.config.ts'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - '.github/workflows/github-packages-publish.yml'

  workflow_dispatch:
    inputs:
      versionType:
        description: |
          Type of version to publish (e.g., patch, minor, major, prepatch, preminor, premajor)
        type: choice
        required: false
        default: patch
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor

      publishTag:
        description: |
          Publish tag for npm (choose from: latest, alpha, beta, next)
        type: choice
        required: false
        default: latest
        options:
          - latest
          - alpha
          - beta
          - next

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    uses: gawaooooo-sandbox/learn-github-actions-reusable-workflows/.github/workflows/lint.yml@v3
    permissions:
      contents: read
      packages: read

  test:
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    uses: ./.github/workflows/test.yml

  auto-version:
    if: github.event.action == 'labeled' && startsWith(github.event.label.name, 'release/')
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: List labels
        run: |
          echo "Labels: ${{ toJSON(github.event.pull_request.labels) }}"

      - name: Setup Node.js and Install dependencies
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/node-setup-and-dependencies@v3
        with:
          checkout-ref: ${{ github.head_ref}}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Bump version and push tag
        run: |
          set -xeu

          # Update version in package.json and package-lock.json without creating a git tag
          version_label="$(echo "${LABEL_NAME}" | cut -d'/' -f2)"
          # Check if the version label is one of the expected types
          if [[ ! "$version_label" =~ ^(patch|minor|major)$ ]]; then
            echo "::error::Invalid version label '$version_label'. Valid labels are 'release/patch', 'release/minor', and 'release/major'. Please use one of these labels to trigger version updates."
            exit 1
          fi
          echo "Bumping version to $version_label"
          npm version "$version_label" --no-git-tag-version

          # Manually commit the updated package files because npm version --no-git-tag-version does not auto-commit
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to $version_label"
        env:
          LABEL_NAME: ${{ github.event.label.name }}

  publish-release-package:
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'release/')
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: write
      packages: write
    steps:
      - name: Setup Node.js and Install dependencies
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/node-setup-and-dependencies@v3
        with:
          npm-registry-url: https://npm.pkg.github.com
          npm-scope: '@${{ github.repository_owner }}'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Extract and Tag Version
        id: tag_version
        run: |
          set -xeu

          # Fetch tags from the remote to make sure we have the latest tags information
          git fetch --tags

          # Extract the version number from package.json using jq
          version=$(jq -r '.version' package.json)
          echo "Extracted version: $version"

          # Check if the tag already exists
          if git rev-parse "v${version}" >/dev/null 2>&1; then
            echo "::error::Tag 'v${version}' already exists. Please update the version number or delete the existing tag."
            exit 1
          fi

          # Create a new Git tag with the extracted version number
          git tag "v${version}"

          # Push the new tag to the repository
          git push origin "v${version}"

          echo "tag=v${version}" >> "$GITHUB_OUTPUT"

      - name: Publish to GitHub Packages
        run: |
          set -xeu
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          set -xeu
          gh release create ${{ steps.tag_version.outputs.tag }} --title ${{ steps.tag_version.outputs.tag }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Append release success to job summary
        if: success() # Only append to the job summary if the job was successful
        run: |
          echo "## Release Details ✨" >> $GITHUB_STEP_SUMMARY
          echo "Release for version ${{ steps.tag_version.outputs.tag }} was successfully created 🎉." >> $GITHUB_STEP_SUMMARY
          echo "You can view the release [here](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag_version.outputs.tag }})." >> $GITHUB_STEP_SUMMARY

  publish-dev-package:
    # 手動ディスパッチトリガーは、開発用のブランチから開発用のパッケージを公開するときのみ使用できます。
    # 正式なリリースは、プルリクエストの自動マージによる公開で行います。
    if: github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/main'
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: write
      packages: write
    steps:
      - name: Inputs summary
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/inputs-summary@v3
        with:
          workflow-inputs: ${{ toJSON(inputs) }}

      - name: Setup Node.js and Install dependencies
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/node-setup-and-dependencies@v3
        with:
          npm-registry-url: https://npm.pkg.github.com
          npm-scope: '@${{ github.repository_owner }}'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update npm version and publish
        id: new_version
        run: |
          set -xeu

          version=$(npm version "${{ inputs.versionType }}" -m "chore(release): bump version to %s")
          echo "New version is $version"
          echo "version=${version}" >> "$GITHUB_OUTPUT"

          npm publish --tag ${{ inputs.publishTag }}
          git push --follow-tags
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          set -xeu
          gh release create ${{ steps.new_version.outputs.version }} --title ${{ steps.new_version.outputs.version }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Append release success to job summary
        if: success() # Only append to the job summary if the job was successful
        run: |
          echo "## Release Details ✨" >> $GITHUB_STEP_SUMMARY
          echo "Release for version ${{ steps.new_version.outputs.version }} was successfully created 🎉." >> $GITHUB_STEP_SUMMARY
          echo "You can view the release [here](https://github.com/${{ github.repository }}/releases/tag/${{ steps.new_version.outputs.version }})." >> $GITHUB_STEP_SUMMARY
