name: GitHub Packages Publish
run-name: ${{ github.workflow }} for ${{ github.ref_name }} [${{ github.event_name }} ${{github.event.action}}] ${{ inputs.versionTag }} [${{ github.sha }}]

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened, closed]
    branches:
      - main
    paths:
      - 'src/**'
      - 'nuxt.config.ts'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - '.github/workflows/github-packages-publish.yml'

  workflow_dispatch:
    inputs:
      versionTag:
        description: 'Tag version to publish'
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    uses: gawaooooo-sandbox/learn-github-actions-reusable-workflows/.github/workflows/lint.yml@v3
    permissions:
      contents: read
      packages: read

  test:
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    uses: ./.github/workflows/test.yml

  auto-version:
    if: github.event.action == 'labeled' && startsWith(github.event.label.name, 'release/')
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: List labels
        run: |
          echo "Labels: ${{ toJSON(github.event.pull_request.labels) }}"

      - name: Setup Node.js and Install dependencies
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/node-setup-and-dependencies@v3
        with:
          checkout-ref: ${{ github.head_ref}}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Bump version and push tag
        run: |
          set -xeu

          # Update version in package.json and package-lock.json without creating a git tag
          version_label="$(echo "${LABEL_NAME}" | cut -d'/' -f2)"
          # Check if the version label is one of the expected types
          if [[ ! "$version_label" =~ ^(patch|minor|major|prepatch|preminor|premajor)$ ]]; then
            echo "Error: Invalid version label '$version_label'."
            exit 1
          fi
          echo "Bumping version to $version_label"
          npm version "$version_label" --no-git-tag-version

          # Manually commit the updated package files because npm version --no-git-tag-version does not auto-commit
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to $version_label"
        env:
          LABEL_NAME: ${{ github.event.label.name }}

  publish-and-release:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: write
      packages: write
    steps:
      - name: Setup Node.js and Install dependencies
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/node-setup-and-dependencies@v3
        with:
          npm-registry-url: https://npm.pkg.github.com
          npm-scope: '@${{ github.repository_owner }}'

      - name: Get latest tag (or use workflow_dispatch input if available)
        id: get_tag
        run: |
          set -xeu

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${VERSION_TAG}" ]; then
            echo "Using custom version tag: ${VERSION_TAG}"
            echo "tag=${VERSION_TAG}" >> "$GITHUB_OUTPUT"

            # npmのバージョンをカスタムタグに更新するが、Gitのタグは生成しない
            npm version "${VERSION_TAG}" --no-git-tag-version
          else
            git fetch --tags
            latest_tag=$(git describe --tags "$(git rev-list --tags --max-count=1)")
            if [ -z "$latest_tag" ]; then
              echo "Error: No tags found."
              exit 1
            fi
            echo "tag=${latest_tag}" >> "$GITHUB_OUTPUT"
          fi
        env:
          VERSION_TAG: ${{ inputs.versionTag }}

      - name: Publish to GitHub Packages
        run: |
          set -xeu
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          set -xeu
          gh release create ${{ steps.get_tag.outputs.tag }} --title ${{ steps.get_tag.outputs.tag }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
